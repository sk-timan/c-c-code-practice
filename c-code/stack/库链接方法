gcc -c stack/stack.c stack/push.c stack/pop.c stack/is_empty.c




ar rs libstack.a stack.o push.o pop.o is_empty.o	//库文件名都是以lib开头的，静态库以.a作为后缀,r表示将后面的文件列表添加到文件包，如果文件包不存在就创建它，如果文件包中已有同名文件就替换成新的。s是专用于生成静态库的;静态库重定位之后，各段的加载地址就定死了，使用了绝对地址




ar r libstack.a stack.o push.o pop.o is_empty.o
ranlib libstack.a	//等价




gcc main.c -L. -lstack -Istack -o main  	//-L选项告诉编译器去哪里找需要的库文件，-L.表示在当前目录找。-lstack告诉编译器要链接libstack库，-I选项告诉编译器去stack文件夹找头文件。



gcc -c -g -fPIC stack/stack.c stack/push.c stack/pop.c stack/is_empty.c		//-f后面跟一些编译选项，PIC是其中一种，表示生成位置无关代码（Position Independent Code）



gcc -shared  stack.o push.o pop.o is_empty.o -o libstack.so	//生成共享库，共享库各段的加载地址并没有定死，可以加载到任意位置,共享库可以很方便地升级库文件而不需要重新编译应用程序，这是静态库所没有的优点





gcc main.c -g -L. -lstack -Istack -o main
./main 		//查看能否运行，若提示找不到库，需添加库路径


vi /etc/ld.so.conf	//vim下编辑ld.so.conf中的内容；添加动态库的绝对路径(/home/zhan)
VIM编辑完成之后 
命令:w !sudo tee %	//修改只读文件


sudo ldconfig -v	//处理生成cache




gcc -shared -Wl,-soname,libstack.so.1 -o libstack.so.1.0 stack.o push.o pop.o is_empty.o	//生成soname(主版本号)为libstack.so.1；realname(完整版本号)为libstack.so.1.0的共享库，方便库函数的升级



ln -s libstack.so.1.0 libstack.so	//生成linker name为libstack.so的共享库(链接时，只认so)
























